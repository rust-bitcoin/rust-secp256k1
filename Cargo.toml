[package]
name = "secp256k1"
version = "0.31.1"
authors = [ "Dawid Ciężarkiewicz <dpc@ucore.info>",
            "Andrew Poelstra <apoelstra@wpsoftware.net>" ]
license = "CC0-1.0"
homepage = "https://github.com/rust-bitcoin/rust-secp256k1/"
repository = "https://github.com/rust-bitcoin/rust-secp256k1/"
documentation = "https://docs.rs/secp256k1/"
description = "Rust wrapper library for Pieter Wuille's `libsecp256k1`. Implements ECDSA and BIP 340 signatures for the SECG elliptic curve group secp256k1 and related utilities."
keywords = [ "crypto", "ECDSA", "secp256k1", "libsecp256k1", "bitcoin" ]
readme = "README.md"
edition = "2021"
rust-version = "1.63.0"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[features]
default = ["std"]
std = ["alloc", "secp256k1-sys/std", "rand?/std", "rand?/std_rng", "rand?/thread_rng", "hashes?/std"]
# allow use of Secp256k1::new and related API that requires an allocator
alloc = ["secp256k1-sys/alloc"]
recovery = ["secp256k1-sys/recovery"]
lowmemory = ["secp256k1-sys/lowmemory"]
global-context = ["std"]
# disable re-randomization of the global context, which provides some
# defense-in-depth against sidechannel attacks. You should only use
# this feature if you expect the `rand` crate's thread_rng to panic.
# (If you are sure the `rand` and `std` features will not be enabled, e.g.
# if you are doing a no-std build, then this feature does nothing
# and is not necessary.)
global-context-less-secure = ["global-context"]
arbitrary = ["dep:arbitrary"]

[dependencies]
secp256k1-sys = { version = "0.11.0", default-features = false, path = "./secp256k1-sys" }

arbitrary = { version = "1.4", optional = true }
hashes = { package = "bitcoin_hashes", version = "0.16", default-features = false, optional = true }
rand = { version = "0.9", default-features = false, optional = true }
serde = { version = "1.0.103", default-features = false, optional = true }

[dev-dependencies]
rand_core = "0.9"
serde_cbor = "0.10.0"
serde_test = "1.0.19"
bincode = "1.3.3"
hex_lit = "0.1.1"

[target.wasm32-unknown-unknown.dev-dependencies]
wasm-bindgen-test = "0.3"
getrandom = { version = "0.3", features = ["wasm_js"] }

[lints.rust]
unexpected_cfgs = { level = "deny", check-cfg = ['cfg(bench)', 'cfg(secp256k1_fuzz)', 'cfg(rust_secp_no_symbol_renaming)'] }

[[example]]
name = "sign_verify_recovery"
required-features = ["recovery", "hashes", "std"]

[[example]]
name = "sign_verify"
required-features = ["hashes", "std"]

[[example]]
name = "generate_keys"
required-features = ["rand", "std"]

[[example]]
name = "musig"
required-features = ["rand", "std"]

[workspace]
members = ["secp256k1-sys"]
exclude = ["no_std_test"]

[lints.clippy]
# Exclude lints we don't think are valuable.
large_enum_variant = "allow" # docs say "measure before paying attention to this"; why is it on by default??
similar_names = "allow" # Too many (subjectively) false positives.
uninlined_format_args = "allow" # This is a subjective style choice.
indexing_slicing = "allow" # Too many false positives ... would be cool though
match_bool = "allow" # Adds extra indentation and LOC.
match_same_arms = "allow" # Collapses things that are conceptually unrelated to each other.
must_use_candidate = "allow" # Useful for audit but many false positives.
