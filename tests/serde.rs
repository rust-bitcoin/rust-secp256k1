#![cfg(feature = "serde")]

extern crate bincode;
extern crate secp256k1;
extern crate serde_cbor;

use secp256k1::{musig, Keypair, PublicKey, SecretKey, XOnlyPublicKey};

// Arbitrary key data.

#[rustfmt::skip]
static SK_BYTES: [u8; 32] = [
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23,
    0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x30, 0x31,
    0x0f, 0x10, 0x1f, 0xa0, 0xa9, 0xaa, 0xaf, 0xff,
];

#[rustfmt::skip]
static PK_BYTES: [u8; 33] = [
    0x02,
    0x18, 0x84, 0x57, 0x81, 0xf6, 0x31, 0xc4, 0x8f,
    0x1c, 0x97, 0x09, 0xe2, 0x30, 0x92, 0x06, 0x7d,
    0x06, 0x83, 0x7f, 0x30, 0xaa, 0x0c, 0xd0, 0x54,
    0x4a, 0xc8, 0x87, 0xfe, 0x91, 0xdd, 0xd1, 0x66,
];

#[rustfmt::skip]
static XONLY_PK_BYTES: [u8; 32] = [
    0x18, 0x84, 0x57, 0x81, 0xf6, 0x31, 0xc4, 0x8f,
    0x1c, 0x97, 0x09, 0xe2, 0x30, 0x92, 0x06, 0x7d,
    0x06, 0x83, 0x7f, 0x30, 0xaa, 0x0c, 0xd0, 0x54,
    0x4a, 0xc8, 0x87, 0xfe, 0x91, 0xdd, 0xd1, 0x66,
];

#[rustfmt::skip]
static MUSIG_PUBLIC_NONCE_BYTES: [u8; 74] = [
    0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0xf4, 0xa3, 0x61, 0xab, 0xd3, 0xd5, 0x05,
    0x35, 0xbe, 0x08, 0x42, 0x1d, 0xbc, 0x73, 0xb0,
    0xa8, 0xf5, 0x95, 0x65, 0x4a, 0xe3, 0x23, 0x8a,
    0xfc, 0xaf, 0x25, 0x99, 0xf9, 0x4e, 0x25, 0x20,
    0x4c, 0x03, 0x6b, 0xa1, 0x74, 0x21, 0x44, 0x33,
    0xe2, 0x1f, 0x5c, 0xd0, 0xfc, 0xb1, 0x4b, 0x03,
    0x8e, 0xb4, 0x0b, 0x05, 0xb7, 0xe7, 0xc8, 0x20,
    0xdd, 0x21, 0xaa, 0x56, 0x8f, 0xdb, 0x0a, 0x9d,
    0xe4, 0xd7,
];

#[rustfmt::skip]
static MUSIG_AGGREGATED_NONCE_BYTES: [u8; 74] = [
    0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x02, 0x18, 0xc3, 0x0f, 0xe0, 0xf5, 0x67, 0xa4,
    0xa9, 0xc0, 0x5e, 0xb4, 0x83, 0x5e, 0x27, 0x35,
    0x41, 0x9c, 0xf3, 0x0f, 0x83, 0x4c, 0x9c, 0xe2,
    0xfe, 0x34, 0x30, 0xf0, 0x21, 0xba, 0x4e, 0xac,
    0xd5, 0x03, 0x11, 0x2e, 0x97, 0xbc, 0xf6, 0xa0,
    0x22, 0xd2, 0x36, 0xd7, 0x1a, 0x93, 0x57, 0x82,
    0x4a, 0x2b, 0x19, 0x51, 0x5f, 0x98, 0x01, 0x31,
    0xb3, 0x97, 0x0b, 0x08, 0x7c, 0xad, 0xf9, 0x4c,
    0xc4, 0xa7,
];

#[rustfmt::skip]
static MUSIG_PARTIAL_SIG_BYTES: [u8; 40] = [
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x28, 0x9e, 0xeb, 0x2f, 0x5e, 0xfc, 0x31, 0x4a,
    0xa6, 0xd8, 0x7b, 0xf5, 0x81, 0x25, 0x04, 0x3c,
    0x96, 0xd1, 0x5a, 0x00, 0x7d, 0xb4, 0xb6, 0xaa,
    0xaa, 0xc7, 0xd1, 0x80, 0x86, 0xf4, 0x9a, 0x99,
];

fn secret_key() -> SecretKey {
    SecretKey::from_secret_bytes(SK_BYTES).expect("failed to create sk from slice")
}

// Our current serde serialization implementation is only guaranteed to be fixed
// width for bincode. https://docs.rs/bincode/latest/bincode/index.html
#[test]
fn bincode_secret_key() {
    let sk = secret_key();
    let ser = bincode::serialize(&sk).unwrap();

    assert_eq!(ser, SK_BYTES);
}

#[test]
fn bincode_public_key() {
    let pk = PublicKey::from_slice(&PK_BYTES).expect("failed to create pk from slice");
    let ser = bincode::serialize(&pk).unwrap();

    assert_eq!(ser, &PK_BYTES as &[u8])
}

#[test]
fn bincode_keypair() {
    let kp = Keypair::from_seckey_byte_array(SK_BYTES).expect("failed to create keypair");
    let ser = bincode::serialize(&kp).unwrap();

    assert_eq!(ser, SK_BYTES);
}

#[test]
fn bincode_x_only_public_key() {
    let pk = XOnlyPublicKey::from_byte_array(XONLY_PK_BYTES)
        .expect("failed to create xonly pk from slice");
    let ser = bincode::serialize(&pk).unwrap();

    assert_eq!(ser, XONLY_PK_BYTES);
}

#[test]
fn cbor() {
    let sk = secret_key();
    let e = serde_cbor::to_vec(&sk).unwrap();
    // Secret key is 32 bytes. CBOR adds a byte of metadata for 20 of these bytes,
    // (Apparently, any byte whose value is <24 gets an extra byte.)
    // It also adds a 1-byte length prefix and a byte of metadata for the whole vector.
    assert_eq!(e.len(), 54);
}

#[test]
fn musig() {
    let public_nonce: musig::PublicNonce = bincode::deserialize(&MUSIG_PUBLIC_NONCE_BYTES).unwrap();
    let ser = bincode::serialize(&public_nonce).unwrap();

    assert_eq!(ser, MUSIG_PUBLIC_NONCE_BYTES);

    let aggregated_nonce: musig::AggregatedNonce =
        bincode::deserialize(&MUSIG_AGGREGATED_NONCE_BYTES).unwrap();
    let ser = bincode::serialize(&aggregated_nonce).unwrap();

    assert_eq!(ser, MUSIG_AGGREGATED_NONCE_BYTES);

    let partial_sig: musig::PartialSignature =
        bincode::deserialize(&MUSIG_PARTIAL_SIG_BYTES).unwrap();
    let ser = bincode::serialize(&partial_sig).unwrap();

    assert_eq!(ser, MUSIG_PARTIAL_SIG_BYTES);
}
